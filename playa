#!/bin/bash
#
# PLAYA - a simple folder/subfolder music scanner/player based on FFmpeg
# to simply play all audio from an audio/video file list in sub directory
#
# which was finally more complicated than expected at first glance, but
# made possible with help from #bash IRC, @geirha, @izabera, @llua

# Copyright (C) 2015  Digidog - Released under GPL v3

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

Name_to_here="$(basename "$(readlink -f "$0")")"
Path_to_here="$(dirname "$(readlink -f "$0")")"
Path_to_config_dir="$Path_to_here"
config="$Path_to_config_dir/$Name_to_here.cfg"
log_file="$Path_to_config_dir/$Name_to_here.log"
touch $log_file
source "$config"

Help(){

cat << EOF

$Name_to_here  - Copyright (C) 2015 Digidog - GPL v3
is a free simple folder/subfolder music scanner/player based on FFmpeg.
It has an aplay fall back, which does not support playing audio from video

This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions of GPL v3 by crediting the original author

How to use (Terminal commands):
-------------------------------
  $Name_to_here <path/to/folder>		play recursively all music files in side this hierarchy
  $Name_to_here without arguments		play music from terminal position in path recursively
  $Name_to_here -s |--setup				set up an audio output driver ($output_list)
  $Name_to_here -h | --help				Show this help.
  $Name_to_here -p | --playlist			Play playlist m3u file, like set up in playa.cfg with playa -s.

press 'CTRL+C' to simply quit the play queue
skipping not supported yet (@TODO)

EOF

}

ErrMissingDep(){
cat << EOF
Your system does not support FFmpeg or aplay to run this program.
PLease follow the *First steps* and *installation guidelines* of playa at github/diqidoq/playa.
EOF
    Help
    exit 1
}

case "$1" in

	-h|--help)
		Help
		exit 1
	;;
	-s|--setup)
		read -ep "Choose your default audo driver output ($output_list): " output
		echo output_list=$output_list > "$config"
		echo output=$output >> "$config"
		echo playlist=$playlist >> "$config"
		echo "Quit now. Config changed (output: $output)."
		exit 1
	;;
	*)
		# supported media formats, feel free to suggest more
		# should be limited to prevent breaking the script or to insult security issues
		find_args=()
		extensions=( m4a flac mp2 mp3 wav aif aiff aifc aiffc au caf snd w64 aac ape wma mp4 mov avi mkv divx xvid dv ogg )
		for ext in "${extensions[@]}" ; do
			find_args+=( -o -iname "*.$ext" ) 
		done

		# lets remove the first -o from the loop to get the correct find construct 
		unset 'find_args[0]'

		# if no folder is provided we start were the terminal is
		if [[ ! "$1" ]] ; then f='.' ; else f="$1" ; fi

		# http://mywiki.wooledge.org/BashGuide/Arrays
		# work around to prevent trouble with **/* globs in bash -version < 4.3
		playlist=()
		while read -r -d '' ; do
			playlist+=("$REPLY")
		done < <(find "$f/" \( "${find_args[@]}" \) -print0)
																 
		for index in "${!playlist[@]}" ; do
			# we better implement || break to be able to interrupt the loop on CTRL+C if STDIN fails
			# It's because of ffplay, it has set a signal handler for SIGINT, and fails to reset it
			# @TODO: testing a better solution with trap 'trap - SIGINT; kill -INT "$$"' INT or
			# trap 'trap - INT; kill -INT "$$"' INT ... or use key bindings (?) 
			# http://stackoverflow.com/questions/4200800/in-bash-how-do-i-bind-a-function-key-to-a-command
			if hash mplayer 2>/dev/null ; then
				mplayer if [[ ! "$output" == "none" ]] ; then echo -ao $output ; fi -novideo "${playlist[index]}" || break
			elif hash ffmpeg 2>/dev/null ; then
				ffplay -nodisp -hide_banner -autoexit "${playlist[index]}" || break
			elif hash sox 2>/dev/null ; then
				play "${playlist[index]}" || break
			else
				ErrMissingDep
				exit 1
			fi
		done

		printf \\n
		exit 1
	;;
esac

exit 0
